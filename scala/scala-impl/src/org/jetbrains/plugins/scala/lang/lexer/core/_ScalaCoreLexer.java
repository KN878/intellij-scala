/* The following code was generated by JFlex 1.4.3 on 03.02.2020, 16:58 */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.scaladoc.parser.ScalaDocElementTypes;

import static com.intellij.openapi.util.text.StringUtil.endsWith;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenType.Double;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenType.Float;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenType.Integer;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenType.Long;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenType.*;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03.02.2020, 16:58 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INJ_COMMON_STATE = 10;
  public static final int INSIDE_MULTI_LINE_INTERPOLATED_STRING = 8;
  public static final int WAIT_FOR_INTERPOLATED_STRING = 4;
  public static final int INSIDE_INTERPOLATED_STRING = 6;
  public static final int COMMON_STATE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\31\1\42\1\32\1\0\1\42\1\32\16\31\4\0\1\42\1\16"+
    "\1\36\1\17\1\37\1\114\1\20\1\35\1\54\1\55\1\21\1\22"+
            "\1\116\1\14\1\12\1\26\1\2\1\110\1\107\5\6\1\3\1\112" +
            "\1\23\1\115\1\43\1\106\1\27\1\44\1\24\1\34\1\7\1\46" +
            "\1\47\1\13\1\11\5\30\1\1\6\30\1\100\1\50\3\30\1\4" +
            "\2\30\1\45\1\25\1\52\1\20\1\5\1\15\1\56\1\57\1\63" +
            "\1\10\1\64\1\71\1\101\1\70\1\76\1\67\1\105\1\65\1\73" +
            "\1\72\1\66\1\75\1\30\1\62\1\60\1\61\1\33\1\102\1\104" +
            "\1\74\1\77\1\103\1\51\1\20\1\53\1\20\6\31\1\40\32\31" +
            "\2\0\4\30\1\20\2\0\1\20\1\30\1\0\1\20\1\31\1\20" +
            "\1\0\1\20\1\20\3\0\1\30\4\0\1\30\5\0\27\30\1\20" +
            "\37\30\1\20\u01ca\30\4\0\14\30\16\0\5\30\7\0\1\30\1\0" +
            "\1\30\21\0\160\31\5\30\1\0\2\30\2\0\4\30\1\0\1\30" +
            "\6\0\1\30\1\0\3\30\1\0\1\30\1\0\24\30\1\0\123\30" +
            "\1\20\213\30\1\20\5\31\2\0\246\30\1\0\46\30\2\0\1\30" +
            "\7\0\47\30\5\0\2\20\1\30\1\0\55\31\1\0\1\31\1\0" +
            "\2\31\1\0\2\31\1\0\1\31\10\0\33\30\5\0\3\30\15\0" +
            "\6\31\3\20\2\0\1\30\2\0\2\20\13\31\1\0\1\31\3\0" +
            "\53\30\37\31\4\0\2\30\1\31\143\30\1\0\1\30\10\31\1\20" +
            "\6\31\2\30\2\31\1\20\4\31\2\30\12\31\3\30\2\20\1\30" +
            "\17\0\1\31\1\30\1\31\36\30\33\31\2\0\131\30\13\31\1\30" +
            "\16\0\12\31\41\30\11\31\2\30\1\20\3\0\1\30\5\0\26\30" +
            "\4\31\1\30\11\31\1\30\3\31\1\30\5\31\22\0\31\30\3\31" +
            "\4\0\13\30\65\0\25\30\1\0\10\30\26\0\60\31\66\30\3\31" +
            "\1\30\22\31\1\30\7\31\12\30\2\31\2\0\12\31\1\0\20\30" +
            "\3\31\1\0\10\30\2\0\2\30\2\0\26\30\1\0\7\30\1\0" +
            "\1\30\3\0\4\30\2\0\1\31\1\30\7\31\2\0\2\31\2\0" +
            "\3\31\1\30\10\0\1\31\4\0\2\30\1\0\3\30\2\31\2\0" +
            "\12\31\4\30\6\0\1\20\2\30\4\0\3\31\1\0\6\30\4\0" +
            "\2\30\2\0\26\30\1\0\7\30\1\0\2\30\1\0\2\30\1\0" +
            "\2\30\2\0\1\31\1\0\5\31\4\0\2\31\2\0\3\31\3\0" +
            "\1\31\7\0\4\30\1\0\1\30\7\0\14\31\3\30\1\31\13\0" +
            "\3\31\1\0\11\30\1\0\3\30\1\0\26\30\1\0\7\30\1\0" +
            "\2\30\1\0\5\30\2\0\1\31\1\30\10\31\1\0\3\31\1\0" +
            "\3\31\2\0\1\30\17\0\2\30\2\31\2\0\12\31\1\0\1\30" +
            "\7\0\1\30\6\31\1\0\3\31\1\0\10\30\2\0\2\30\2\0" +
            "\26\30\1\0\7\30\1\0\2\30\1\0\5\30\2\0\1\31\1\30" +
            "\7\31\2\0\2\31\2\0\3\31\10\0\2\31\4\0\2\30\1\0" +
            "\3\30\2\31\2\0\12\31\1\20\1\30\20\0\1\31\1\30\1\0" +
            "\6\30\3\0\3\30\1\0\4\30\3\0\2\30\1\0\1\30\1\0" +
            "\2\30\3\0\2\30\3\0\3\30\3\0\14\30\4\0\5\31\3\0" +
            "\3\31\1\0\4\31\2\0\1\30\6\0\1\31\16\0\12\31\3\0" +
            "\6\20\1\30\1\20\5\0\4\31\1\0\10\30\1\0\3\30\1\0" +
            "\27\30\1\0\20\30\3\0\1\30\7\31\1\0\3\31\1\0\4\31" +
            "\7\0\2\31\1\0\3\30\5\0\2\30\2\31\2\0\12\31\17\0" +
            "\1\20\1\30\3\31\1\0\10\30\1\0\3\30\1\0\27\30\1\0" +
            "\12\30\1\0\5\30\2\0\1\31\1\30\7\31\1\0\3\31\1\0" +
            "\4\31\7\0\2\31\7\0\1\30\1\0\2\30\2\31\2\0\12\31" +
            "\1\0\2\30\15\0\4\31\1\0\10\30\1\0\3\30\1\0\51\30" +
            "\2\31\1\30\7\31\1\0\3\31\1\0\4\31\1\30\1\20\4\0" +
            "\3\30\1\31\7\0\3\30\2\31\2\0\12\31\11\0\1\20\6\30" +
            "\2\0\2\31\1\0\22\30\3\0\30\30\1\0\11\30\1\0\1\30" +
            "\2\0\7\30\3\0\1\31\4\0\6\31\1\0\1\31\1\0\10\31" +
            "\6\0\12\31\2\0\2\31\15\0\60\30\1\31\2\30\7\31\4\0" +
            "\10\30\10\31\1\0\12\31\47\0\2\30\1\0\1\30\2\0\2\30" +
            "\1\0\1\30\2\0\1\30\6\0\4\30\1\0\7\30\1\0\3\30" +
            "\1\0\1\30\1\0\1\30\2\0\2\30\1\0\4\30\1\31\2\30" +
            "\6\31\1\0\2\31\1\30\2\0\5\30\1\0\1\30\1\0\6\31" +
            "\2\0\12\31\2\0\4\30\40\0\1\30\3\20\17\0\1\20\1\0" +
            "\3\20\2\31\6\20\12\31\12\0\1\20\1\31\1\20\1\31\1\20" +
            "\1\31\4\0\2\31\10\30\1\0\44\30\4\0\24\31\1\0\2\31" +
            "\5\30\13\31\1\0\44\31\1\0\10\20\1\31\6\20\1\0\2\20" +
            "\5\0\4\20\47\0\53\30\24\31\1\30\12\31\6\0\6\30\4\31" +
            "\4\30\3\31\1\30\3\31\2\30\7\31\3\30\4\31\15\30\14\31" +
            "\1\30\17\31\2\20\46\30\1\0\1\30\5\0\1\30\2\0\53\30" +
            "\1\0\u014d\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0\4\30" +
            "\2\0\51\30\1\0\4\30\2\0\41\30\1\0\4\30\2\0\7\30" +
            "\1\0\1\30\1\0\4\30\2\0\17\30\1\0\71\30\1\0\4\30" +
            "\2\0\103\30\2\0\3\31\40\0\20\30\12\20\6\0\126\30\2\0" +
            "\6\30\3\0\u026c\30\2\0\21\30\1\0\32\30\5\0\113\30\3\0" +
            "\13\30\7\0\15\30\1\0\4\30\3\31\13\0\22\30\3\31\13\0" +
            "\22\30\2\31\14\0\15\30\1\0\3\30\1\0\2\31\14\0\64\30" +
            "\40\31\3\0\1\30\3\0\2\30\1\31\2\0\12\31\41\0\4\31" +
            "\1\0\12\31\6\0\130\30\10\0\5\30\2\31\42\30\1\31\1\30" +
            "\5\0\106\30\12\0\37\30\1\0\14\31\4\0\14\31\4\0\1\20" +
            "\5\0\12\31\36\30\2\0\5\30\13\0\54\30\4\0\32\30\6\0" +
            "\12\31\4\0\42\20\27\30\5\31\4\0\65\30\12\31\1\0\35\31" +
            "\2\0\13\31\6\0\12\31\15\0\1\30\10\0\16\31\102\0\5\31" +
            "\57\30\21\31\7\30\4\0\12\31\7\0\12\20\11\31\11\20\3\0" +
            "\3\31\36\30\15\31\2\30\12\31\54\30\16\31\14\0\44\30\24\31" +
            "\10\0\12\31\3\0\3\30\12\31\44\30\2\0\11\30\107\0\3\31" +
            "\1\0\25\31\4\30\1\31\4\30\3\31\2\30\3\31\6\0\300\30" +
            "\72\31\1\0\5\31\u0116\30\2\0\6\30\2\0\46\30\2\0\6\30" +
            "\2\0\10\30\1\0\1\30\1\0\1\30\1\0\1\30\1\0\37\30" +
            "\2\0\65\30\1\0\7\30\1\0\1\30\3\0\3\30\1\0\7\30" +
            "\3\0\4\30\2\0\6\30\4\0\15\30\5\0\3\30\1\0\7\30" +
            "\16\0\5\31\30\0\1\41\1\41\5\31\20\0\2\30\3\0\1\20" +
            "\15\0\1\20\1\0\1\30\13\0\5\31\1\0\12\31\1\0\1\30" +
            "\10\0\3\20\2\0\1\30\12\0\3\20\3\0\15\30\3\0\40\30" +
            "\20\0\15\31\4\0\1\31\3\0\14\31\17\0\2\20\1\30\4\20" +
            "\1\30\2\20\12\30\1\20\1\30\2\20\1\20\5\30\6\20\1\30" +
            "\1\20\1\30\1\20\1\30\1\20\4\30\1\20\13\30\2\20\4\30" +
            "\5\20\5\30\1\20\1\20\2\20\1\30\1\20\20\0\51\30\1\0" +
            "\2\20\4\0\1\113\4\20\5\20\2\20\4\20\1\20\2\20\1\20" +
            "\2\20\1\20\7\20\1\20\37\20\2\20\2\20\1\111\1\20\1\20" +
            "\37\20\u010c\20\10\20\4\0\24\20\2\20\7\20\2\0\121\20\1\20" +
            "\36\20\31\20\50\20\6\20\105\20\31\0\13\20\121\0\116\20\26\0" +
            "\267\20\1\20\11\20\1\20\66\20\10\20\157\20\1\20\44\20\1\20" +
            "\323\20\54\0\54\20\5\20\2\0\37\20\12\0\20\20\u0100\20\203\20" +
            "\26\0\77\20\4\0\40\20\2\0\u0102\20\60\20\25\20\2\20\6\20" +
            "\47\20\2\0\40\20\2\0\42\20\3\0\14\20\1\0\11\20\31\0" +
            "\4\20\20\0\57\30\1\0\57\30\1\0\205\30\6\20\4\30\3\31" +
            "\2\30\14\0\46\30\1\0\1\30\5\0\1\30\2\0\70\30\7\0" +
            "\1\30\17\0\1\31\27\30\11\0\7\30\1\0\7\30\1\0\7\30" +
            "\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30" +
            "\1\0\40\31\57\0\1\30\120\0\32\20\1\0\131\20\14\0\326\20" +
            "\32\0\14\20\10\0\1\20\3\30\12\0\2\20\14\0\1\20\11\30" +
            "\6\31\1\0\5\30\2\20\5\30\1\0\2\20\1\0\126\30\2\0" +
            "\2\31\2\0\3\30\1\0\132\30\1\0\4\30\5\0\52\30\2\0" +
            "\136\30\1\0\2\20\4\0\12\20\33\30\5\0\44\20\14\0\20\30" +
            "\37\20\13\0\36\20\10\0\1\20\17\0\40\20\12\0\47\20\17\0" +
            "\u0140\20\u19b6\30\12\0\100\20\u51eb\30\25\0\u048d\30\3\0\67\20\11\0" +
            "\56\30\2\0\u010d\30\3\0\20\30\12\31\2\30\24\0\57\30\1\31" +
            "\4\0\12\31\1\0\37\30\2\31\120\30\2\31\45\0\11\30\2\0" +
            "\147\30\2\0\44\30\1\0\10\30\77\0\13\30\1\31\3\30\1\31" +
            "\4\30\1\31\27\30\5\31\4\20\12\0\2\20\1\30\1\20\6\0" +
            "\64\30\14\0\2\31\62\30\22\31\12\0\12\31\6\0\22\31\6\30" +
            "\3\0\1\30\1\0\1\30\2\0\12\31\34\30\10\31\2\0\27\30" +
            "\15\31\14\0\35\30\3\0\4\31\57\30\16\31\16\0\1\30\12\31" +
            "\6\0\5\30\1\31\12\30\12\31\5\30\1\0\51\30\16\31\11\0" +
            "\3\30\1\31\10\30\2\31\2\0\12\31\6\0\27\30\3\20\1\30" +
            "\3\31\62\30\1\31\1\30\3\31\2\30\2\31\5\30\2\31\1\30" +
            "\1\31\1\30\30\0\3\30\2\0\13\30\5\31\2\0\3\30\2\31" +
            "\12\0\6\30\2\0\6\30\2\0\6\30\11\0\7\30\1\0\7\30" +
            "\1\0\53\30\1\0\12\30\12\0\163\30\10\31\1\0\2\31\2\0" +
            "\12\31\6\0\u2ba4\30\14\0\27\30\4\0\61\30\u2104\0\u016e\30\2\0" +
            "\152\30\46\0\7\30\14\0\5\30\5\0\1\30\1\31\12\30\1\20" +
            "\15\30\1\0\5\30\1\0\1\30\1\0\2\30\1\0\2\30\1\0" +
            "\154\30\41\0\u016b\30\22\0\100\30\2\0\66\30\50\0\15\30\1\20" +
            "\2\0\20\31\20\0\20\31\3\0\2\30\30\0\3\30\22\0\1\20" +
            "\1\0\3\20\2\0\1\30\6\0\5\30\1\0\207\30\2\0\1\31" +
            "\4\0\1\30\6\0\1\20\4\0\12\31\2\0\3\20\2\0\32\30" +
            "\4\0\1\30\1\0\32\30\1\0\1\20\1\0\1\20\7\0\131\30" +
            "\3\0\6\30\2\0\6\30\2\0\6\30\2\0\3\30\3\0\2\30" +
            "\1\20\1\0\1\20\2\30\1\0\1\20\4\20\2\20\12\0\3\31" +
            "\2\20\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\12\0\1\1\1\2\2\3\1\4\1\2\1\5\1\2" +
                  "\1\1\1\6\1\7\1\10\3\2\1\11\1\1\1\12" +
                  "\1\2\1\11\1\2\1\13\1\14\1\15\1\16\1\17" +
                  "\1\20\1\21\21\2\1\22\1\23\1\24\1\25\1\26" +
                  "\1\2\1\27\1\30\1\12\1\31\1\32\1\12\1\33" +
                  "\3\12\2\34\1\12\14\0\1\2\1\35\1\36\1\3" +
                  "\2\0\1\37\1\40\1\37\1\0\1\2\1\41\1\37" +
                  "\1\0\1\2\1\0\2\2\1\0\1\2\1\42\1\43" +
                  "\1\0\3\44\1\0\1\45\1\12\1\0\1\46\1\47" +
                  "\1\50\1\2\1\51\1\2\1\52\2\0\27\2\1\53" +
                  "\6\2\1\27\3\0\2\54\1\0\1\55\1\56\2\0" +
                  "\1\57\2\60\1\0\1\55\1\61\1\34\1\0\1\34" +
                  "\14\0\1\2\1\35\2\0\1\37\1\3\3\62\1\0" +
                  "\1\37\1\0\1\63\1\2\1\0\2\2\2\0\2\2" +
                  "\1\64\3\44\2\0\1\46\1\0\1\2\1\0\1\65" +
                  "\2\0\1\66\2\0\5\2\1\67\20\2\1\70\2\2" +
                  "\1\71\10\2\1\72\1\73\2\2\1\74\2\54\2\0" +
                  "\1\32\1\75\2\60\1\0\1\34\5\0\1\35\1\0" +
                  "\2\62\2\0\1\76\1\2\2\0\1\2\1\0\2\2" +
                  "\1\77\4\0\1\50\5\0\3\2\1\100\2\2\1\101" +
                  "\1\102\1\103\1\2\1\104\2\2\1\105\1\106\2\2" +
                  "\1\107\5\2\1\110\12\2\1\111\1\0\1\54\1\112" +
                  "\1\60\2\0\1\62\1\76\1\0\1\2\2\0\1\77" +
                  "\1\0\1\113\6\0\1\2\1\114\1\2\1\115\1\116" +
                  "\1\2\1\0\1\2\1\117\1\120\4\2\1\121\1\2" +
                  "\1\122\1\123\1\124\5\2\1\125\1\126\1\127\4\0" +
                  "\1\2\1\23\1\24\1\113\2\0\1\130\3\0\1\2" +
                  "\1\131\1\132\2\0\3\2\1\133\1\134\7\2\1\135" +
                  "\1\0\1\2\3\0\1\2\2\0\2\2\1\136\1\2" +
                  "\1\137\1\140\1\141\1\2\1\142\1\2\1\0\1\76" +
                  "\3\0\1\143\2\0\2\2\1\144\1\2\1\145\1\76" +
                  "\4\0\2\2\1\146\1\147\1\0\1\147\1\2";

  private static int [] zzUnpackAction() {
    int[] result = new int[461];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229" +
                  "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0365\0\u0452" +
                  "\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u04f0\0\u062c\0\u067b" +
                  "\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0316\0\u0855\0\u04f0" +
                  "\0\u0316\0\u08a4\0\u0316\0\u0316\0\u08f3\0\u0316\0\u0942\0\u0991" +
                  "\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b\0\u0bba\0\u0c09" +
                  "\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45\0\u0d94\0\u0de3\0\u0e32\0\u0e81" +
                  "\0\u04f0\0\u04f0\0\u0316\0\u0316\0\u0ed0\0\u0f1f\0\u0f6e\0\u0fbd" +
                  "\0\u0316\0\u0316\0\u100c\0\u105b\0\u10aa\0\u10f9\0\u0316\0\u1148" +
                  "\0\u1197\0\u11e6\0\u1235\0\u1284\0\u12d3\0\u1322\0\u1371\0\u13c0" +
                  "\0\u140f\0\u145e\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u1638" +
                  "\0\u0316\0\u1687\0\u16d6\0\u1725\0\u0316\0\u0316\0\u1774\0\u17c3" +
                  "\0\u1812\0\u0365\0\u1861\0\u053f\0\u0316\0\u18b0\0\u18ff\0\u194e" +
                  "\0\u199d\0\u19ec\0\u1a3b\0\u04f0\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77" +
                  "\0\u1bc6\0\u1a8a\0\u1c15\0\u1c64\0\u1cb3\0\u0316\0\u0316\0\u1d02" +
                  "\0\u04f0\0\u1d51\0\u04f0\0\u1da0\0\u1def\0\u1e3e\0\u1e8d\0\u1edc" +
                  "\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u2105\0\u2154" +
                  "\0\u21a3\0\u21f2\0\u2241\0\u2290\0\u22df\0\u232e\0\u237d\0\u23cc" +
                  "\0\u241b\0\u246a\0\u24b9\0\u2508\0\u0365\0\u2557\0\u25a6\0\u25f5" +
                  "\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u0fbd\0\u281e" +
                  "\0\u286d\0\u28bc\0\u281e\0\u0316\0\u290b\0\u295a\0\u0316\0\u29a9" +
                  "\0\u29f8\0\u2a47\0\u29a9\0\u0316\0\u2a96\0\u11e6\0\u0316\0\u2ae5" +
                  "\0\u2b34\0\u2b83\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d" +
                  "\0\u0316\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37\0\u2f86" +
                  "\0\u2fd5\0\u3024\0\u3073\0\u30c2\0\u3111\0\u3160\0\u31af\0\u0365" +
                  "\0\u053f\0\u31fe\0\u324d\0\u329c\0\u32eb\0\u333a\0\u3389\0\u33d8" +
                  "\0\u0316\0\u3427\0\u3476\0\u34c5\0\u3514\0\u3563\0\u0316\0\u35b2" +
                  "\0\u3601\0\u3650\0\u0316\0\u369f\0\u36ee\0\u0316\0\u373d\0\u378c" +
                  "\0\u37db\0\u382a\0\u3879\0\u38c8\0\u3917\0\u0365\0\u3966\0\u39b5" +
                  "\0\u3a04\0\u3a53\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d" +
                  "\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8\0\u3e07\0\u3e56\0\u3ea5" +
                  "\0\u3ef4\0\u0365\0\u3f43\0\u3f92\0\u3fe1\0\u4030\0\u407f\0\u40ce" +
                  "\0\u411d\0\u416c\0\u0365\0\u0365\0\u41bb\0\u420a\0\u4259\0\u42a8" +
                  "\0\u0316\0\u42f7\0\u4346\0\u4395\0\u0316\0\u43e4\0\u0316\0\u4433" +
                  "\0\u11e6\0\u4482\0\u44d1\0\u4520\0\u13c0\0\u2d5d\0\u456f\0\u45be" +
                  "\0\u460d\0\u0316\0\u465c\0\u46ab\0\u18ff\0\u46fa\0\u4749\0\u4798" +
                  "\0\u47e7\0\u4836\0\u4885\0\u48d4\0\u04f0\0\u4923\0\u4972\0\u49c1" +
                  "\0\u4a10\0\u04f0\0\u4a5f\0\u4aae\0\u4afd\0\u4b4c\0\u4b9b\0\u4bea" +
                  "\0\u4c39\0\u4c88\0\u0365\0\u4cd7\0\u4d26\0\u0365\0\u0365\0\u0365" +
                  "\0\u4d75\0\u4dc4\0\u4e13\0\u4e62\0\u0365\0\u0365\0\u4eb1\0\u4f00" +
                  "\0\u0365\0\u4f4f\0\u4f9e\0\u4fed\0\u503c\0\u508b\0\u0365\0\u50da" +
                  "\0\u5129\0\u5178\0\u51c7\0\u5216\0\u5265\0\u52b4\0\u5303\0\u5352" +
                  "\0\u53a1\0\u0365\0\u53f0\0\u28bc\0\u4395\0\u2a47\0\u543f\0\u548e" +
                  "\0\u3111\0\u31fe\0\u54dd\0\u552c\0\u557b\0\u55ca\0\u0316\0\u5619" +
                  "\0\u04f0\0\u5668\0\u56b7\0\u5706\0\u5755\0\u57a4\0\u57f3\0\u5842" +
                  "\0\u0365\0\u5891\0\u0365\0\u0365\0\u58e0\0\u592f\0\u597e\0\u0365" +
                  "\0\u0365\0\u59cd\0\u5a1c\0\u5a6b\0\u5aba\0\u0365\0\u5b09\0\u5b58" +
                  "\0\u0365\0\u0365\0\u5ba7\0\u5bf6\0\u5c45\0\u5c94\0\u5ce3\0\u0365" +
                  "\0\u0365\0\u0365\0\u5d32\0\u2cbf\0\u5d81\0\u5dd0\0\u5e1f\0\u0316" +
                  "\0\u0316\0\u0316\0\u5e6e\0\u5ebd\0\u5f0c\0\u5f5b\0\u5faa\0\u5ff9" +
                  "\0\u6048\0\u0365\0\u0365\0\u6097\0\u60e6\0\u6135\0\u6184\0\u61d3" +
                  "\0\u0365\0\u0365\0\u6222\0\u6271\0\u62c0\0\u630f\0\u635e\0\u63ad" +
                  "\0\u63fc\0\u0365\0\u644b\0\u649a\0\u64e9\0\u6538\0\u6587\0\u65d6" +
                  "\0\u6625\0\u6674\0\u66c3\0\u6712\0\u0365\0\u6761\0\u0365\0\u0365" +
                  "\0\u0365\0\u67b0\0\u0365\0\u67ff\0\u684e\0\u46fa\0\u689d\0\u68ec" +
                  "\0\u693b\0\u0365\0\u698a\0\u69d9\0\u6a28\0\u6a77\0\u0365\0\u6ac6" +
                  "\0\u0365\0\u54dd\0\u6b15\0\u6b64\0\u6bb3\0\u6c02\0\u6c51\0\u6ca0" +
                  "\0\u0365\0\u0316\0\u6cef\0\u0365\0\u6d3e";

  private static int [] zzUnpackRowMap() {
    int[] result = new int[461];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\1\14\1\17\1\16\1\14" +
            "\1\20\1\14\1\21\1\14\1\22\1\23\1\22\1\24" +
            "\3\22\1\25\1\26\1\27\1\30\1\31\1\14\1\13" +
            "\1\32\2\14\1\33\1\34\1\35\2\32\1\36\1\37" +
            "\1\40\1\41\3\14\1\42\1\43\1\44\1\45\1\46" +
            "\1\47\1\14\1\50\1\51\1\52\1\53\1\54\1\55" +
            "\1\56\2\14\1\57\1\60\1\61\1\14\1\62\1\63" +
            "\1\64\1\14\1\65\1\66\1\14\1\67\1\14\1\70" +
            "\2\16\1\71\1\16\1\72\1\22\1\73\1\74\1\13" +
            "\1\14\1\15\1\16\1\14\1\17\1\16\1\14\1\20" +
            "\1\14\1\21\1\14\1\22\1\23\1\22\1\24\3\22" +
            "\1\25\1\26\1\27\1\30\1\31\1\14\1\13\1\32" +
            "\2\14\1\33\1\34\1\35\2\32\1\36\1\75\1\40" +
            "\1\41\3\14\1\42\1\43\1\44\1\45\1\46\1\47" +
            "\1\14\1\50\1\51\1\52\1\53\1\54\1\55\1\56" +
            "\2\14\1\57\1\60\1\61\1\14\1\62\1\63\1\64" +
            "\1\14\1\65\1\66\1\14\1\67\1\14\1\70\2\16" +
            "\1\71\1\16\1\72\1\22\1\73\1\74\36\0\1\76" +
            "\60\0\25\77\1\100\4\77\1\101\3\77\1\102\1\103" +
            "\57\77\36\104\1\105\1\106\57\104\1\107\1\110\2\107" +
            "\2\110\1\107\3\110\1\107\1\110\1\111\1\112\12\111" +
            "\1\110\2\107\2\110\2\107\1\110\3\107\2\111\1\107" +
            "\3\110\5\107\30\110\1\111\2\107\1\111\1\107\2\111" +
            "\2\107\1\0\1\113\2\0\2\113\1\0\3\113\1\0" +
            "\1\113\14\0\1\113\2\0\2\113\2\0\1\113\6\0" +
            "\3\113\5\0\30\113\11\0\25\114\1\115\4\114\1\116" +
            "\3\114\1\117\1\120\57\114\2\0\1\121\1\122\2\0" +
            "\1\122\100\0\2\122\1\0\1\122\5\0\1\123\2\124" +
            "\2\123\1\124\3\123\1\0\1\123\1\125\1\126\12\125" +
            "\1\123\1\124\1\0\2\123\2\0\1\123\1\124\2\0" +
            "\2\125\1\0\3\123\5\0\30\123\1\125\2\124\1\125" +
            "\1\124\2\125\122\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\30\14\1\0\2\14\1\0\1\14\5\0" +
            "\1\131\1\132\1\133\1\134\2\132\1\0\1\135\1\136" +
            "\1\137\1\140\33\0\1\135\14\0\1\140\1\131\3\0" +
            "\1\136\2\0\1\134\12\0\2\132\1\0\1\133\5\0" +
            "\1\131\2\16\1\0\2\16\1\0\1\135\1\136\1\137" +
            "\1\140\33\0\1\135\14\0\1\140\1\131\3\0\1\136" +
            "\15\0\2\16\1\0\1\16\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\6\14\1\141\1\14\1\142" +
            "\17\14\1\0\2\14\1\0\1\14\6\0\2\143\2\0" +
            "\1\143\100\0\2\143\1\0\1\143\20\0\1\22\1\0" +
            "\12\22\13\0\2\22\41\0\1\22\2\0\1\22\1\0" +
            "\2\22\2\0\15\144\1\145\7\144\1\146\4\144\1\0" +
            "\5\144\2\0\55\144\14\0\1\22\1\0\1\147\11\22" +
            "\13\0\2\22\41\0\1\22\2\0\1\22\1\0\2\22" +
            "\16\0\1\22\1\0\5\22\1\150\4\22\13\0\2\22" +
            "\41\0\1\22\2\0\1\22\1\0\2\22\16\0\1\22" +
            "\1\0\12\22\3\0\1\151\7\0\2\22\41\0\1\22" +
            "\2\0\1\22\1\0\2\22\16\0\1\22\1\0\3\22" +
            "\1\152\4\22\1\153\1\22\13\0\2\22\41\0\1\22" +
            "\2\0\1\22\1\0\2\22\16\0\1\22\1\0\5\22" +
            "\1\154\4\22\13\0\2\22\41\0\1\22\2\0\1\22" +
            "\1\0\2\22\34\0\1\32\5\0\3\32\54\0\1\155" +
            "\1\156\2\155\2\156\1\155\3\156\1\155\1\156\1\157" +
            "\1\155\7\157\1\160\2\157\1\156\1\155\1\0\2\156" +
            "\1\161\1\155\1\156\3\155\2\157\1\162\3\156\1\162" +
            "\4\155\30\156\1\157\2\155\1\157\1\155\2\157\2\155" +
            "\25\163\1\164\4\163\1\0\3\163\1\165\60\163\1\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\1\166\4\0" +
            "\30\14\1\0\2\14\1\0\1\14\5\0\1\167\2\0" +
            "\2\167\1\0\3\167\1\0\1\167\1\72\1\0\1\170" +
            "\4\22\1\171\4\22\1\167\2\0\2\167\2\0\1\167" +
            "\3\0\1\22\1\172\1\0\3\167\5\0\30\167\1\22" +
            "\2\0\1\22\1\0\1\22\1\173\45\0\1\174\116\0" +
            "\1\175\54\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\1\14\1\176\26\14\1\0\2\14\1\0\1\14" +
            "\5\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\1\177\1\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\6\14\1\200\21\14\1\0\2\14\1\0\1\14" +
            "\5\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\2\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\4\14\1\201\5\14\1\202\6\14\1\203\6\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\6\14\1\204\21\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\1\205\6\14\1\206\20\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\7\14\1\207\4\14\1\210\1\14\1\211" +
            "\11\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\1\212\27\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\1\14\1\213\22\14\1\214\3\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\1\215\7\14\1\216\7\14" +
            "\1\217\7\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\1\220" +
            "\1\14\1\0\1\130\2\14\5\0\3\14\5\0\6\14" +
            "\1\221\21\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\1\222\27\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\1\223\3\14\1\224\23\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\13\14\1\225\1\14\1\226" +
            "\12\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\20\14\1\227\7\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\20\14\1\230\7\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\1\231\27\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\12\14\1\232\5\14\1\233\7\14\1\0\2\14" +
            "\1\0\1\14\20\0\1\22\1\0\11\22\1\71\13\0" +
            "\2\22\41\0\1\22\2\0\1\22\1\0\2\22\16\0" +
            "\1\72\1\0\5\22\1\171\4\22\13\0\2\22\41\0" +
            "\1\22\2\0\1\22\1\0\1\22\1\173\2\0\25\234" +
            "\1\235\4\234\1\0\3\234\1\236\1\0\57\234\25\77" +
            "\1\237\4\77\1\0\3\77\2\0\111\77\1\0\64\77" +
            "\1\0\1\240\2\0\2\240\1\0\3\240\1\0\1\240" +
            "\1\241\1\242\12\241\1\240\2\0\2\240\2\0\1\243" +
            "\3\0\2\241\1\0\3\240\1\244\4\0\30\240\1\241" +
            "\2\0\1\241\1\0\2\241\2\0\36\104\1\245\1\0" +
            "\115\104\1\246\1\247\57\104\1\0\1\250\2\0\2\250" +
            "\1\0\3\250\1\0\1\250\1\251\1\252\12\251\1\250" +
            "\2\0\2\250\2\0\1\253\3\0\2\251\1\0\3\250" +
            "\1\254\4\0\30\250\1\251\2\0\1\251\1\0\2\251" +
            "\3\0\4\110\1\255\4\110\1\0\1\110\14\0\2\110" +
            "\1\0\2\110\2\0\2\110\5\0\3\110\5\0\30\110" +
            "\1\0\2\110\1\0\1\110\20\0\1\111\1\0\12\111" +
            "\13\0\2\111\41\0\1\111\2\0\1\111\1\0\2\111" +
            "\2\0\15\256\1\257\7\256\1\260\4\256\1\0\5\256" +
            "\2\0\55\256\1\0\4\113\1\261\4\113\1\0\1\113" +
            "\14\0\2\113\1\0\2\113\2\0\2\113\5\0\3\113" +
            "\5\0\30\113\1\0\2\113\1\0\1\113\4\0\32\114" +
            "\1\116\3\114\1\262\1\120\57\114\25\116\1\263\10\116" +
            "\1\264\1\0\115\116\1\264\1\0\57\116\25\0\1\265" +
            "\10\0\1\266\105\0\1\265\73\0\1\267\1\0\1\270" +
            "\2\267\65\0\1\270\12\0\2\267\10\0\2\122\1\0" +
            "\2\122\100\0\2\122\1\0\1\122\5\0\1\123\2\124" +
            "\2\123\1\124\3\123\1\271\1\123\14\0\1\123\1\124" +
            "\1\0\2\123\2\0\1\123\1\124\5\0\3\123\5\0" +
            "\30\123\1\0\2\124\1\0\1\124\5\0\1\123\2\124" +
            "\2\123\1\124\3\123\1\0\1\123\14\0\1\123\1\124" +
            "\1\0\2\123\2\0\1\123\1\124\5\0\3\123\5\0" +
            "\30\123\1\0\2\124\1\0\1\124\11\0\1\124\4\0" +
            "\1\271\1\0\1\125\1\0\12\125\13\0\2\125\41\0" +
            "\1\125\2\0\1\125\1\0\2\125\2\0\15\126\1\272" +
            "\14\126\1\0\5\126\2\273\55\126\1\0\4\14\1\127" +
            "\4\14\1\0\1\14\1\274\1\0\12\274\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\2\0\2\274\1\0\3\14" +
            "\5\0\30\14\1\274\2\14\1\274\1\14\2\274\2\0" +
            "\25\275\1\276\4\275\1\0\3\275\1\277\1\0\57\275" +
            "\1\0\1\131\1\132\1\133\1\0\2\132\1\0\1\135" +
            "\1\136\1\137\1\140\33\0\1\135\14\0\1\140\1\131" +
            "\3\0\1\136\15\0\2\132\1\0\1\133\6\0\2\133" +
            "\1\0\2\133\1\0\1\135\1\136\1\300\1\140\33\0" +
            "\1\135\14\0\1\140\4\0\1\136\15\0\2\133\1\0" +
            "\1\133\6\0\2\301\1\0\5\301\1\0\1\301\20\0" +
            "\1\301\11\0\2\301\6\0\2\301\3\0\2\301\4\0" +
            "\1\301\15\0\2\301\1\0\1\301\5\0\1\302\2\143" +
            "\2\302\1\143\3\302\1\0\1\303\1\304\1\305\12\304" +
            "\1\302\2\0\2\302\2\0\1\302\3\0\2\304\1\0" +
            "\3\302\5\0\6\302\1\303\21\302\1\304\2\143\1\304" +
            "\1\143\2\304\4\0\2\306\2\0\1\306\5\0\1\307" +
            "\5\0\1\307\64\0\2\306\1\0\1\306\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\13\14\1\310" +
            "\14\14\1\0\2\14\1\0\1\14\6\0\2\143\1\0" +
            "\2\143\1\0\1\135\1\136\1\0\1\140\33\0\1\135" +
            "\14\0\1\140\4\0\1\136\15\0\2\143\1\0\1\143" +
            "\4\0\15\144\1\311\7\144\1\146\4\144\1\0\64\144" +
            "\14\312\1\147\1\312\1\313\11\147\13\312\2\147\41\312" +
            "\1\147\2\312\1\147\1\312\2\147\2\312\14\0\1\22" +
            "\1\0\1\22\1\314\10\22\13\0\2\22\41\0\1\22" +
            "\2\0\1\22\1\0\2\22\111\0\1\315\7\0\14\316" +
            "\1\317\1\316\3\317\1\320\4\317\1\22\1\317\13\316" +
            "\2\317\41\316\1\317\2\316\1\317\1\316\2\317\2\316" +
            "\32\153\1\0\64\153\25\0\1\321\7\0\1\321\62\0" +
            "\4\322\1\323\4\322\1\0\1\322\11\0\1\321\2\0" +
            "\2\322\1\0\2\322\1\321\1\0\2\322\5\0\3\322" +
            "\5\0\30\322\1\0\2\322\1\0\1\322\20\0\1\324" +
            "\1\0\12\324\5\0\1\321\5\0\2\324\41\0\1\324" +
            "\2\0\1\324\1\0\2\324\2\0\2\155\1\325\3\155" +
            "\1\325\5\155\1\157\1\155\12\157\2\155\1\0\1\326" +
            "\7\155\2\157\41\155\1\157\2\325\1\157\1\155\2\157" +
            "\2\155\35\0\1\321\61\0\25\163\1\164\4\163\1\0" +
            "\3\163\1\327\112\163\1\0\64\163\36\0\1\330\74\0" +
            "\1\331\1\0\12\22\13\0\2\22\1\332\40\0\1\22" +
            "\2\0\1\22\1\0\2\22\3\0\1\167\2\0\2\167" +
            "\1\0\3\167\1\0\1\167\1\22\1\0\12\22\1\167" +
            "\2\0\2\167\2\0\1\167\3\0\2\22\1\0\3\167" +
            "\5\0\30\167\1\22\2\0\1\22\1\0\2\22\3\0" +
            "\1\333\2\0\2\333\1\0\3\333\1\0\1\333\2\0" +
            "\1\334\11\0\1\333\2\0\2\333\2\0\1\333\4\0" +
            "\1\335\1\0\3\333\5\0\30\333\12\0\1\336\2\0" +
            "\2\336\1\0\3\336\1\0\1\336\2\0\1\337\11\0" +
            "\1\336\2\0\2\336\2\0\1\336\4\0\1\340\1\0" +
            "\3\336\5\0\30\336\12\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\2\14\1\341\25\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\17\14\1\342\10\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\1\343\27\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\1\344\1\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\1\345\20\14\1\346\6\14\1\0\2\14\1\0\1\14" +
            "\5\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\2\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\4\14\1\347\1\14\1\350\11\14\1\351\7\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\17\14\1\352\10\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\3\14\1\353\24\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\2\14\1\354\1\355\24\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\1\356\27\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\2\14" +
            "\1\357\25\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\1\360" +
            "\1\14\1\0\1\130\2\14\5\0\3\14\5\0\30\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\3\14\1\361\13\14\1\362" +
            "\10\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\25\14\1\363\2\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\11\14\1\364\16\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\6\14\1\365\21\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\7\14\1\366\20\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\4\14\1\367\23\14\1\0\2\14\1\0\1\14" +
            "\5\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\2\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\14\14\1\370\13\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\7\14" +
            "\1\371\20\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\26\14\1\372" +
            "\1\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\3\14\1\373\1\14" +
            "\1\374\22\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\5\14\1\375" +
            "\22\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\10\14\1\376\7\14" +
            "\1\377\7\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\17\14\1\u0100" +
            "\10\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\6\14\1\u0101\21\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\24\14\1\u0102\3\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\4\14\1\u0103\2\14\1\u0104\20\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\20\14\1\u0105\7\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\3\14\1\u0106\24\14\1\0\2\14" +
            "\1\0\1\14\4\0\25\234\1\235\4\234\1\0\3\234" +
            "\2\0\111\234\1\0\64\234\36\0\1\u0107\61\0\4\240" +
            "\1\u0108\4\240\1\0\1\240\14\0\2\240\1\0\2\240" +
            "\2\0\2\240\5\0\3\240\5\0\30\240\1\0\2\240" +
            "\1\0\1\240\20\0\1\241\1\0\12\241\13\0\2\241" +
            "\41\0\1\241\2\0\1\241\1\0\2\241\2\0\15\242" +
            "\1\u0109\7\242\1\u010a\4\242\1\0\5\242\2\0\55\242" +
            "\36\104\1\u010b\1\0\115\104\1\u010c\1\u010d\57\104\1\0" +
            "\4\250\1\u010e\4\250\1\0\1\250\14\0\2\250\1\0" +
            "\2\250\2\0\2\250\5\0\3\250\5\0\30\250\1\0" +
            "\2\250\1\0\1\250\20\0\1\251\1\0\12\251\13\0" +
            "\2\251\41\0\1\251\2\0\1\251\1\0\2\251\2\0" +
            "\15\252\1\u010f\7\252\1\u0110\4\252\1\0\5\252\2\0" +
            "\55\252\1\0\4\110\1\255\4\110\1\0\1\110\1\111" +
            "\1\0\12\111\2\110\1\0\2\110\2\0\2\110\2\0" +
            "\2\111\1\0\3\110\5\0\30\110\1\111\2\110\1\111" +
            "\1\110\2\111\2\0\15\256\1\u0111\7\256\1\260\4\256" +
            "\1\0\64\256\1\0\4\113\1\261\4\113\1\0\1\113" +
            "\1\u0112\1\0\12\u0112\2\113\1\0\2\113\2\0\2\113" +
            "\2\0\2\u0112\1\0\3\113\5\0\30\113\1\u0112\2\113" +
            "\1\u0112\1\113\2\u0112\2\0\25\116\1\263\10\116\1\u0113" +
            "\1\0\57\116\25\114\1\115\4\114\1\116\3\114\1\262" +
            "\1\120\57\114\36\116\1\u0113\1\0\57\116\25\u0114\1\120" +
            "\4\u0114\1\0\3\u0114\1\u0115\1\120\57\u0114\36\0\1\271" +
            "\62\0\1\267\2\0\2\267\100\0\2\267\10\0\2\u0116" +
            "\1\0\5\u0116\1\0\1\u0116\20\0\1\u0116\11\0\2\u0116" +
            "\6\0\2\u0116\3\0\2\u0116\4\0\1\u0116\15\0\2\u0116" +
            "\1\0\1\u0116\16\0\1\271\12\0\1\126\116\0\1\126" +
            "\105\0\1\274\1\0\12\274\6\0\1\130\4\0\2\274" +
            "\41\0\1\274\2\0\1\274\1\0\2\274\2\0\25\275" +
            "\1\276\4\275\1\0\3\275\2\0\111\275\1\0\64\275" +
            "\36\0\1\u0117\62\0\2\143\2\0\1\143\1\0\1\135" +
            "\1\136\1\0\1\140\33\0\1\135\14\0\1\140\4\0" +
            "\1\136\15\0\2\143\1\0\1\143\5\0\1\131\2\301" +
            "\1\0\5\301\1\u0118\1\301\20\0\1\301\11\0\2\301" +
            "\6\0\2\301\3\0\2\301\1\131\3\0\1\301\15\0" +
            "\2\301\1\0\1\301\5\0\4\302\1\u0119\4\302\1\0" +
            "\1\302\14\0\2\302\1\0\2\302\2\0\2\302\5\0" +
            "\3\302\5\0\30\302\1\0\2\302\1\0\1\302\5\0" +
            "\4\302\1\u0119\4\302\1\0\1\302\1\307\5\0\1\307" +
            "\5\0\2\302\1\0\2\302\2\0\2\302\5\0\3\302" +
            "\5\0\30\302\1\0\2\302\1\0\1\302\20\0\1\304" +
            "\1\0\12\304\13\0\2\304\41\0\1\304\2\0\1\304" +
            "\1\0\2\304\2\0\15\305\1\u011a\7\305\1\u011b\4\305" +
            "\1\0\5\305\2\0\55\305\2\0\2\306\1\0\2\306" +
            "\1\0\1\135\1\136\35\0\1\135\21\0\1\136\15\0" +
            "\2\306\1\0\1\306\6\0\2\306\2\0\1\306\100\0" +
            "\2\306\1\0\1\306\4\0\16\312\1\u011c\114\312\1\147" +
            "\1\312\1\313\1\u011d\10\147\13\312\2\147\41\312\1\147" +
            "\2\312\1\147\1\312\2\147\2\312\14\0\1\22\1\0" +
            "\1\u011e\11\22\13\0\2\22\41\0\1\22\2\0\1\22" +
            "\1\0\2\22\112\0\1\u011f\6\0\21\316\1\u0120\4\316" +
            "\1\0\104\316\1\317\1\316\3\317\1\u0121\4\317\1\22" +
            "\1\317\13\316\2\317\41\316\1\317\2\316\1\317\1\316" +
            "\2\317\2\316\14\u0122\1\u0123\1\u0122\3\u0123\1\u0124\4\u0123" +
            "\1\u0125\1\u0123\13\u0122\2\u0123\41\u0122\1\u0123\2\u0122\1\u0123" +
            "\1\u0122\2\u0123\2\u0122\1\0\4\322\1\323\4\322\1\0" +
            "\1\322\14\0\2\322\1\0\2\322\2\0\2\322\5\0" +
            "\3\322\5\0\30\322\1\0\2\322\1\0\1\322\5\0" +
            "\4\322\1\323\4\322\1\0\1\322\1\324\1\0\12\324" +
            "\2\322\1\0\2\322\2\0\2\322\2\0\2\324\1\0" +
            "\3\322\5\0\30\322\1\324\2\322\1\324\1\322\2\324" +
            "\16\0\1\324\1\0\12\324\13\0\2\324\41\0\1\324" +
            "\2\0\1\324\1\0\2\324\4\0\1\u0126\3\0\1\u0126" +
            "\16\0\1\321\7\0\1\321\51\0\2\u0126\10\0\1\u0127" +
            "\1\u0128\2\0\4\u0128\1\0\1\u0128\11\0\1\321\6\0" +
            "\1\u0128\1\321\10\0\2\u0128\6\0\2\u0128\3\0\2\u0128" +
            "\4\0\1\u0128\15\0\2\u0128\1\0\1\u0128\4\0\36\330" +
            "\1\u0129\60\330\14\0\1\u012a\1\0\12\22\13\0\2\22" +
            "\41\0\1\22\2\0\1\22\1\0\2\22\50\0\1\u012b" +
            "\64\0\1\u012c\30\0\1\u012d\52\0\1\333\2\0\2\333" +
            "\1\0\3\333\1\0\1\333\14\0\1\333\2\0\2\333" +
            "\2\0\1\333\6\0\3\333\5\0\30\333\25\0\1\u012e" +
            "\30\0\1\u012f\52\0\1\336\2\0\2\336\1\0\3\336" +
            "\1\0\1\336\14\0\1\336\2\0\2\336\2\0\1\336" +
            "\6\0\3\336\5\0\30\336\12\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\3\14\1\u0130\24\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\6\14\1\u0131\21\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\7\14\1\u0132\20\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\6\14\1\u0133\21\14\1\0\2\14\1\0\1\14" +
            "\5\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\2\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\20\14\1\u0134\7\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\10\14" +
            "\1\u0135\17\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\14\14\1\u0136" +
            "\13\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\2\14\1\u0137\25\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\6\14\1\u0138\21\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\1\u0139\1\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\30\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\6\14\1\u013a\21\14\1\0\2\14\1\0\1\14" +
            "\5\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\2\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\5\14\1\u013b\22\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\2\14" +
            "\1\u013c\25\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\6\14\1\u013d" +
            "\21\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\15\14\1\u013e\12\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\6\14\1\u013f\21\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\10\14\1\u0140\17\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\21\14\1\u0141\6\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\6\14\1\u0142\21\14\1\0\2\14\1\0\1\14" +
            "\5\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\2\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\4\14\1\u0143\23\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\2\14" +
            "\1\u0144\25\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\22\14\1\u0145" +
            "\5\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\1\u0146\27\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\7\14\1\u0147\20\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\5\14\1\u0148\22\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\4\14\1\u0149\23\14\1\0\2\14\1\0\1\14" +
            "\5\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\2\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\27\14\1\u014a\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\3\14\1\u014b" +
            "\24\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\24\14\1\u014c\3\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\7\14\1\u014d\1\u014e\17\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\7\14\1\u014f\20\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\6\14\1\u0150\21\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\7\14\1\u0151\20\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\12\14\1\u0152\15\14\1\0\2\14\1\0\1\14" +
            "\4\0\36\u0107\1\u0153\1\0\57\u0107\1\0\4\240\1\u0108" +
            "\4\240\1\0\1\240\1\241\1\0\12\241\2\240\1\0" +
            "\2\240\2\0\2\240\2\0\2\241\1\0\3\240\5\0" +
            "\30\240\1\241\2\240\1\241\1\240\2\241\2\0\15\242" +
            "\1\u0154\7\242\1\u010a\4\242\1\0\64\242\36\104\2\0" +
            "\57\104\36\0\1\u0155\61\0\4\250\1\u010e\4\250\1\0" +
            "\1\250\1\251\1\0\12\251\2\250\1\0\2\250\2\0" +
            "\2\250\2\0\2\251\1\0\3\250\5\0\30\250\1\251" +
            "\2\250\1\251\1\250\2\251\2\0\15\252\1\u0156\7\252" +
            "\1\u0110\4\252\1\0\64\252\14\0\1\u0112\1\0\12\u0112" +
            "\13\0\2\u0112\41\0\1\u0112\2\0\1\u0112\1\0\2\u0112" +
            "\2\0\36\116\1\u0157\1\0\57\116\32\u0114\1\0\3\u0114" +
            "\1\u0115\1\120\57\u0114\36\u0117\1\u0158\1\0\57\u0117\1\0" +
            "\1\302\2\0\2\302\1\0\3\302\1\0\1\302\1\304" +
            "\1\305\12\304\1\302\2\0\2\302\2\0\1\302\3\0" +
            "\2\304\1\0\3\302\5\0\30\302\1\304\2\0\1\304" +
            "\1\0\2\304\3\0\4\302\1\u0119\4\302\1\0\1\302" +
            "\1\304\1\0\12\304\2\302\1\0\2\302\2\0\2\302" +
            "\2\0\2\304\1\0\3\302\5\0\30\302\1\304\2\302" +
            "\1\304\1\302\2\304\2\0\15\305\1\u0159\7\305\1\u011b" +
            "\4\305\1\0\64\305\16\312\1\u011c\1\u015a\77\312\14\u015b" +
            "\1\u011e\1\u015b\5\u011e\1\u015c\4\u011e\13\u015b\2\u011e\41\u015b" +
            "\1\u011e\2\u015b\1\u011e\1\u015b\2\u011e\2\u015b\47\0\1\u015d" +
            "\42\0\1\u015e\4\0\21\316\1\u0120\4\316\1\u015f\104\316" +
            "\1\317\1\316\3\317\1\u0121\4\317\1\u0125\1\317\13\316" +
            "\2\317\41\316\1\317\2\316\1\317\1\316\2\317\2\316" +
            "\21\u0122\1\u0160\4\u0122\1\0\104\u0122\1\u0123\1\u0122\3\u0123" +
            "\1\u0124\4\u0123\1\22\1\u0123\13\u0122\2\u0123\41\u0122\1\u0123" +
            "\2\u0122\1\u0123\1\u0122\2\u0123\16\u0122\1\u0123\1\u0122\3\u0123" +
            "\1\u0124\4\u0123\1\u0161\1\u0123\13\u0122\2\u0123\41\u0122\1\u0123" +
            "\2\u0122\1\u0123\1\u0122\2\u0123\2\u0122\2\0\1\155\3\0" +
            "\1\155\16\0\1\321\7\0\1\321\51\0\2\155\10\0" +
            "\1\u0162\1\u0163\2\0\4\u0163\1\0\1\u0163\20\0\1\u0163" +
            "\11\0\2\u0163\6\0\2\u0163\3\0\2\u0163\4\0\1\u0163" +
            "\15\0\2\u0163\1\0\1\u0163\6\0\2\u0163\2\0\4\u0163" +
            "\1\0\1\u0163\20\0\1\u0163\11\0\2\u0163\6\0\2\u0163" +
            "\3\0\2\u0163\4\0\1\u0163\15\0\2\u0163\1\0\1\u0163" +
            "\4\0\36\330\1\u0164\60\330\47\0\1\u0165\63\0\1\333" +
            "\150\0\1\u0166\64\0\1\336\150\0\1\u0167\51\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\4\14\1\u0168" +
            "\23\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\4\14\1\u0169\23\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\6\14\1\u016a\21\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\3\14\1\u016b\24\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\26\14\1\u016c\1\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\4\14\1\u016d\23\14\1\0\2\14\1\0\1\14" +
            "\5\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\u016e\2\14\1\0\1\130\1\14\1\u016f\2\u016e\3\0" +
            "\3\14\5\0\30\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\12\14" +
            "\1\u0170\15\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\2\14\1\u0171" +
            "\25\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\14\14\1\u0172\13\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\4\14\1\u0173\23\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\5\14\1\u0174\22\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\4\14\1\u0175\23\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\6\14\1\u0176\21\14\1\0\2\14\1\0\1\14" +
            "\5\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\2\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\10\14\1\u0177\17\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\7\14" +
            "\1\u0178\20\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\12\14\1\u0179" +
            "\15\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\10\14\1\u017a\17\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\1\u017b\27\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\6\14\1\u017c\21\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\1\u017d\27\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\20\14" +
            "\1\u017e\7\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\4\14\1\u017f" +
            "\23\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\2\14\1\u0180\1\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\30\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\14\14\1\u0181\13\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\6\14\1\u0182\21\14\1\0\2\14" +
            "\1\0\1\14\4\0\36\u0107\1\u0183\1\0\57\u0107\36\0" +
            "\1\u0184\60\0\36\u0117\1\u0185\1\0\57\u0117\23\u015b\1\u0186" +
            "\107\u015b\1\u011e\1\u015b\5\u011e\1\u0187\4\u011e\13\u015b\2\u011e" +
            "\41\u015b\1\u011e\2\u015b\1\u011e\1\u015b\2\u011e\2\u015b\107\0" +
            "\1\u0188\11\0\1\u0189\114\0\21\u0122\1\u0160\4\u0122\1\u018a" +
            "\70\u0122\2\0\1\u018b\1\u018c\2\0\4\u018c\1\0\1\u018c" +
            "\20\0\1\u018c\11\0\2\u018c\6\0\2\u018c\3\0\2\u018c" +
            "\4\0\1\u018c\15\0\2\u018c\1\0\1\u018c\6\0\2\u018c" +
            "\2\0\4\u018c\1\0\1\u018c\20\0\1\u018c\11\0\2\u018c" +
            "\6\0\2\u018c\3\0\2\u018c\4\0\1\u018c\15\0\2\u018c" +
            "\1\0\1\u018c\4\0\36\330\1\u018d\60\330\34\0\1\u018e" +
            "\131\0\1\u018f\116\0\1\u0190\50\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\1\u0191\27\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\2\14\1\u0192\1\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\30\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\14\14\1\u0193\13\14\1\0\2\14\1\0\1\14" +
            "\36\0\1\u016e\5\0\3\u016e\20\0\1\u0194\2\0\1\u0195" +
            "\31\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\u016e\2\14\1\0\1\130\1\14\1\u016f\2\u016e\3\0" +
            "\3\14\5\0\5\14\1\u0196\2\14\1\u0197\17\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\2\14\1\u0198" +
            "\1\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\30\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\3\14\1\u0199\24\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\3\14\1\u019a\24\14\1\0\2\14\1\0\1\14" +
            "\5\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\2\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\20\14\1\u019b\7\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\15\14" +
            "\1\u019c\12\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\7\14\1\u019d" +
            "\20\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\23\14\1\u019e\4\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\5\14\1\u019f\22\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\3\14\1\u01a0\24\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\5\14\1\u01a1\22\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\3\14\1\u01a2\24\14\1\0\2\14\1\0\1\14" +
            "\4\0\36\u0107\2\0\57\u0107\36\u0117\2\0\57\u0117\23\u015b" +
            "\1\u01a3\107\u015b\1\u011e\1\u015b\1\u01a4\4\u011e\1\u0187\4\u011e" +
            "\13\u015b\2\u011e\41\u015b\1\u011e\2\u015b\1\u011e\1\u015b\2\u011e" +
            "\2\u015b\2\0\2\155\2\0\4\155\1\0\1\155\20\0" +
            "\1\161\11\0\2\155\6\0\2\155\3\0\2\155\4\0" +
            "\1\155\15\0\2\155\1\0\1\155\6\0\2\155\2\0" +
            "\4\155\1\0\1\155\20\0\1\155\11\0\2\155\6\0" +
            "\2\155\3\0\2\155\4\0\1\155\15\0\2\155\1\0" +
            "\1\155\42\0\1\u018d\130\0\1\u01a5\102\0\1\u01a6\116\0" +
            "\1\u01a7\63\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\5\14\1\u01a8\22\14\1\0\2\14\1\0\1\14" +
            "\71\0\1\u01a9\110\0\1\u01aa\40\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\7\14\1\u01ab\20\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\1\14\1\u01ac\26\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\2\14\1\u01ad\25\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\2\14\1\u01ae\1\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\30\14\1\0\2\14\1\0\1\14" +
            "\5\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\2\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\6\14\1\u01af\21\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\21\14" +
            "\1\u01b0\6\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\6\14\1\u01b1" +
            "\21\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\3\14\1\u01b2\24\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\6\14\1\u01b3\21\14\1\0" +
            "\2\14\1\0\1\14\5\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\20\14\1\u01b4\7\14\1\0\2\14" +
            "\1\0\1\14\4\0\16\u015b\1\u01b5\4\u015b\1\u01a3\107\u015b" +
            "\1\u011e\1\u015b\1\u011e\1\u01b6\3\u011e\1\u015c\4\u011e\13\u015b" +
            "\2\u011e\41\u015b\1\u011e\2\u015b\1\u011e\1\u015b\2\u011e\2\u015b" +
            "\34\0\1\u01b7\132\0\1\u01b8\116\0\1\u01b9\47\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\3\14\1\u01ba" +
            "\24\14\1\0\2\14\1\0\1\14\62\0\1\u01bb\127\0" +
            "\1\u01bc\30\0\4\14\1\127\4\14\1\0\1\14\14\0" +
            "\2\14\1\0\2\14\1\0\1\130\2\14\5\0\3\14" +
            "\5\0\1\u01bd\27\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\11\14" +
            "\1\u01be\16\14\1\0\2\14\1\0\1\14\5\0\4\14" +
            "\1\127\4\14\1\0\1\14\14\0\2\14\1\0\2\14" +
            "\1\0\1\130\2\14\5\0\3\14\5\0\6\14\1\u01bf" +
            "\21\14\1\0\2\14\1\0\1\14\5\0\4\14\1\127" +
            "\4\14\1\0\1\14\14\0\2\14\1\0\2\14\1\0" +
            "\1\130\2\14\5\0\3\14\5\0\6\14\1\u01c0\21\14" +
            "\1\0\2\14\1\0\1\14\5\0\4\14\1\127\4\14" +
            "\1\0\1\14\14\0\2\14\1\0\2\14\1\0\1\130" +
            "\2\14\5\0\3\14\5\0\3\14\1\u01c1\24\14\1\0" +
            "\2\14\1\0\1\14\4\0\17\u015b\1\u01c2\3\u015b\1\u0186" +
            "\73\u015b\45\0\1\167\105\0\1\u01c3\116\0\1\u01c4\142\0" +
            "\1\u01c5\122\0\1\u01c6\33\0\4\14\1\127\4\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\2\14\1\u01c7\25\14\1\0\2\14" +
            "\1\0\1\14\5\0\4\14\1\127\4\14\1\0\1\14" +
            "\14\0\2\14\1\0\2\14\1\0\1\130\2\14\5\0" +
            "\3\14\5\0\6\14\1\u01c8\21\14\1\0\2\14\1\0" +
            "\1\14\5\0\4\14\1\127\2\14\1\u01c9\1\14\1\0" +
            "\1\14\14\0\2\14\1\0\2\14\1\0\1\130\2\14" +
            "\5\0\3\14\5\0\30\14\1\0\2\14\1\0\1\14" +
            "\51\0\1\333\116\0\1\336\131\0\1\u01ca\121\0\1\u01cb" +
            "\34\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\2\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\2\14\1\u01cc\25\14\1\0\2\14\1\0\1\14\5\0" +
            "\4\14\1\127\4\14\1\0\1\14\14\0\2\14\1\0" +
            "\2\14\1\0\1\130\2\14\5\0\3\14\5\0\5\14" +
            "\1\u01cd\22\14\1\0\2\14\1\0\1\14\65\0\1\u01ca" +
            "\36\0\4\14\1\127\4\14\1\0\1\14\14\0\2\14" +
            "\1\0\2\14\1\0\1\130\2\14\5\0\3\14\5\0" +
            "\3\14\1\u01cc\24\14\1\0\2\14\1\0\1\14\4\0";

  private static int [] zzUnpackTrans() {
    int[] result = new int[28045];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\22\1\1\11\2\1\1\11\1\1\2\11" +
            "\1\1\1\11\24\1\2\11\4\1\2\11\4\1\1\11" +
            "\4\1\3\0\1\1\1\0\2\1\4\0\2\1\1\11" +
            "\1\1\2\0\2\11\1\1\1\0\3\1\1\0\1\11" +
            "\1\0\2\1\1\0\3\1\1\0\3\1\1\0\2\1" +
            "\1\0\1\1\2\11\4\1\2\0\37\1\3\0\2\1" +
            "\1\0\1\1\1\11\2\0\1\11\2\1\1\0\1\1" +
            "\1\11\1\1\1\0\1\11\1\0\2\1\4\0\1\1" +
            "\1\0\1\11\2\0\2\1\2\0\5\1\1\0\1\1" +
            "\1\0\2\1\1\0\2\1\2\0\2\1\1\11\3\1" +
            "\2\0\1\11\1\0\1\1\1\0\1\11\2\0\1\11" +
            "\2\0\50\1\1\11\2\0\1\1\1\11\1\1\1\11" +
            "\1\0\2\1\2\0\3\1\1\0\1\1\1\11\2\0" +
            "\2\1\2\0\1\1\1\0\3\1\4\0\1\1\5\0" +
            "\43\1\1\0\4\1\1\0\2\1\1\0\1\1\2\0" +
            "\1\11\1\0\1\1\6\0\6\1\1\0\24\1\1\0" +
            "\1\1\2\0\1\1\3\11\2\0\1\1\3\0\3\1"+
    "\2\0\15\1\1\0\1\1\3\0\1\1\2\0\12\1"+
    "\1\0\1\1\3\0\1\1\2\0\6\1\4\0\3\1"+
    "\1\11\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int[] result = new int[461];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public _ScalaCoreLexer(boolean isScala3) {
      this((java.io.Reader) null);
      this.isScala3 = isScala3;
    }

    private static abstract class InterpolatedStringLevel {
      private int value = 0;

      public int get() {
        return value;
      }

      public boolean isZero() {
        return value == 0;
      }

      public void increase() {
        ++value;
      }

      public void decrease() {
        --value;
      }

      public abstract int getState();
    }

    private static class RegularLevel extends InterpolatedStringLevel {
      public int getState() {
        return INSIDE_INTERPOLATED_STRING;
      }
    }

    private static class MultilineLevel extends InterpolatedStringLevel {
      public int getState() {
        return INSIDE_MULTI_LINE_INTERPOLATED_STRING;
      }
    }

    private boolean isScala3;
    //to get id after $ in interpolated String
    private boolean haveIdInString = false;
    private boolean haveIdInMultilineString = false;
    // Currently opened interpolated Strings. Each int represents the number of the opened left structural braces in the String
    private Stack<InterpolatedStringLevel> nestedString = new Stack<>();

    public boolean isInterpolatedStringState() {
        return shouldProcessBracesForInterpolated() ||
               haveIdInString ||
               haveIdInMultilineString ||
               yystate() == INSIDE_INTERPOLATED_STRING ||
               yystate() == INSIDE_MULTI_LINE_INTERPOLATED_STRING;
    }

    private boolean shouldProcessBracesForInterpolated() {
      return !nestedString.isEmpty();
    }

    @NotNull
    private IElementType processOutsideString() {
      if (shouldProcessBracesForInterpolated()) nestedString.pop();
      yybegin(COMMON_STATE);
      return process(tINTERPOLATED_STRING_END);
    }

    @NotNull
    private IElementType process(@NotNull IElementType type){
      if ((type == tIDENTIFIER || type == kTHIS)) {
        if (haveIdInString) {
          haveIdInString = false;
          yybegin(INSIDE_INTERPOLATED_STRING);
        } else if (haveIdInMultilineString) {
          haveIdInMultilineString = false;
          yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
        }
      }

      if (yystate() == YYINITIAL && type != tWHITE_SPACE_IN_LINE && type != tLBRACE && type != tLPARENTHESIS) {
        yybegin(COMMON_STATE);
      }

      return type;
    }
    
    @NotNull
    private IElementType processInsideString(boolean isInsideMultiline) {
        boolean isEscape = yycharat(1) == '$';
        if (!isEscape) {
            if (isInsideMultiline) {
                haveIdInMultilineString = true;
            } else {
                haveIdInString = true;
            }
            yybegin(INJ_COMMON_STATE);
        }

        yypushback(yylength() - 1 - (isEscape ? 1 : 0));
        return process(isEscape ? tINTERPOLATED_STRING_ESCAPE : tINTERPOLATED_STRING_INJECTION);
    }

    private IElementType processScala3(@NotNull IElementType type) {
        return process(isScala3 ? type : tIDENTIFIER);
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2704) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    
    haveIdInString = false;
    nestedString.clear();
    
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    
    haveIdInString = false;
    nestedString.clear();
    
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 79: {
          return process(kCATCH);
        }
        case 104:
          break;
        case 65: {
          return processScala3(Then());
        }
        case 105:
          break;
        case 3: {
          return process(Integer());
        }
        case 106:
          break;
        case 50:
          // general lookahead, find correct zzMarkedPos
        {
          int zzFState = 8;
          int zzFPos = zzStartRead;
          if (zzFin.length <= zzBufferL.length()) {
            zzFin = new boolean[zzBufferL.length() + 1];
          }
          boolean zzFinL[] = zzFin;
          while (zzFState != -1 && zzFPos < zzMarkedPos) {
            if ((zzAttrL[zzFState] & 1) == 1) {
              zzFinL[zzFPos] = true;
            }
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++);
            zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
          }
          if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; }

          zzFState = 9;
          zzFPos = zzMarkedPos;
          while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos);
            zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
          }
          ;
          zzMarkedPos = zzFPos;
        }
        {
          return process(Integer());
        }
        case 107:
          break;
        case 102: {
          return process(kPROTECTED);
        }
        case 108:
          break;
        case 49:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
        {
          yybegin(COMMON_STATE);
          return process(tINTERPOLATED_STRING_INJECTION);
        }
        case 109:
          break;
        case 35: {
          return process(tLOWER_BOUND);
        }
        case 110:
          break;
        case 34: {
          return process(tLINE_COMMENT);
        }
        case 111:
          break;
        case 62: {
          return process(tSH_COMMENT);
        }
        case 112:
          break;
        case 7: {
          return process(tCOLON);
        }
        case 113:
          break;
        case 94: {
          return process(kEXTENDS);
        }
        case 114:
          break;
        case 63: { //for comments in interpolated strings
          return process(tBLOCK_COMMENT);
        }
        case 115:
          break;
        case 40: {
          yybegin(COMMON_STATE);
          yypushback(yylength());
          return ScalaTokenTypesEx.SCALA_XML_CONTENT_START;
        }
        case 116:
          break;
        case 58: {
          return process(kVAR);
        }
        case 117:
          break;
        case 60: {
          yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
          nestedString.push(new MultilineLevel());
          return process(tINTERPOLATED_MULTILINE_STRING);
        }
        case 118:
          break;
        case 90: {
          return process(kRETURN);
        }
        case 119:
          break;
        case 26: {
          return processOutsideString();
        }
        case 120:
          break;
        case 21: {
          return process(tSEMICOLON);
        }
        case 121:
          break;
        case 64: {
          return process(kTRUE);
        }
        case 122:
          break;
        case 74: {
          yypushback(yylength() - 1);
          return process(tINTERPOLATED_MULTILINE_STRING);
        }
        case 123:
          break;
        case 10: {
          return process(tWRONG_STRING);
        }
        case 124:
          break;
        case 1: {
          return process(tSTUB);
        }
        case 125:
          break;
        case 73: {
          return process(kWITH);
        }
        case 126:
          break;
        case 41: {
          return process(tUPPER_BOUND);
        }
        case 127:
          break;
        case 5: {
          return process(tDOT);
        }
        case 128:
          break;
        case 83: {
          return process(kMATCH);
        }
        case 129:
          break;
        case 22: {
          return process(tCOMMA);
        }
        case 130:
          break;
        case 38: {
          return process(tSTRING);
        }
        case 131:
          break;
        case 66: {
          return process(kTHIS);
        }
        case 132:
          break;
        case 78: {
          return process(kTHROW);
        }
        case 133:
          break;
        case 59: {
          return process(kVAL);
        }
        case 134:
          break;
        case 98: {
          return process(kPRIVATE);
        }
        case 135:
          break;
        case 72: {
          return process(kNULL);
        }
        case 136:
          break;
        case 45: {
          return process(tINTERPOLATED_STRING_ESCAPE);
        }
        case 137:
          break;
        case 30: {
          return process(Long());
        }
        case 138:
          break;
        case 96: {
          return process(kFINALLY);
        }
        case 139:
          break;
        case 95: {
          return process(kFOR_SOME);
        }
        case 140:
          break;
        case 89: {
          return process(kSEALED);
        }
        case 141:
          break;
        case 15: {
          if (shouldProcessBracesForInterpolated()) {
            InterpolatedStringLevel level = nestedString.peek();
            level.decrease();

            if (level.isZero()) {
              yybegin(level.getState());
            }
          }
          return process(tRBRACE);
        }
        case 142:
          break;
        case 44: {
          return processInsideString(false);
        }
        case 143:
          break;
        case 100: {
          return process(kOVERRIDE);
        }
        case 144:
          break;
        case 97: {
          return process(kPACKAGE);
        }
        case 145:
          break;
        case 12: {
          return process(tLSQBRACKET);
        }
        case 146:
          break;
        case 91: {
          return processScala3(ExportKeyword());
        }
        case 147:
          break;
        case 33: {
          return process(kDO);
        }
        case 148:
          break;
        case 56: {
          return process(kFOR);
        }
        case 149:
          break;
        case 31: {
          return process(Double());
        }
        case 150:
          break;
        case 37:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
        {
          if (isScala3) {
            return processScala3(QuoteStart());
          }
        }
        case 151:
          break;
        case 81: {
          return process(kFALSE);
        }
        case 152:
          break;
        case 20: {
          return process(tCHOOSE);
        }
        case 153:
          break;
        case 85: {
          return process(kYIELD);
        }
        case 154:
          break;
        case 54: {
          yypushback(yylength() - 1);
          yybegin(YYINITIAL);
          return process(tLPARENTHESIS);
        }
        case 155:
          break;
        case 8: {
          return process(tAT);
        }
        case 156:
          break;
        case 23: {
          yybegin(INSIDE_INTERPOLATED_STRING);
          nestedString.push(new RegularLevel());
          return process(tINTERPOLATED_STRING);
        }
        case 157:
          break;
        case 80: {
          return process(ClassKeyword());
        }
        case 158:
          break;
        case 2: {
          return process(tIDENTIFIER);
        }
        case 159:
          break;
        case 17: {
          return process(tRPARENTHESIS);
        }
        case 160:
          break;
        case 84: {
          return process(kMACRO);
        }
        case 161:
          break;
        case 9: {
          yybegin(YYINITIAL);
          return process(tWHITE_SPACE_IN_LINE);
        }
        case 162:
          break;
        case 42: {
          return process(tVIEW);
        }
        case 163:
          break;
        case 11: {
          return processScala3(tQUESTION);
        }
        case 164:
          break;
        case 86: {
          return processScala3(GivenKeyword());
        }
        case 165:
          break;
        case 39:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
        {
          if (isScala3) {
            return processScala3(SpliceStart());
          }
        }
        case 166:
          break;
        case 101: {
          return process(kIMPLICIT);
        }
        case 167:
          break;
        case 16: {
          return process(tLPARENTHESIS);
        }
        case 168:
          break;
        case 28: {
          int length = yylength();
          int number = length;
          for (int i = 1; i < length; i++) {
            if (yycharat(i) == '$') {
              number = i;
              break;
            }
          }

          yypushback(length - number);
          boolean isThis = "this".contentEquals(yytext());
          return process(isThis ? kTHIS : tIDENTIFIER);
        }
        case 169:
          break;
        case 13: {
          if (shouldProcessBracesForInterpolated()) {
            nestedString.peek().increase();
          }

          return process(tLBRACE);
        }
        case 170:
          break;
        case 48: {
          return processInsideString(true);
        }
        case 171:
          break;
        case 88: {
          return process(tMULTILINE_STRING);
        }
        case 172:
          break;
        case 82: {
          return process(kFINAL);
        }
        case 173:
          break;
        case 55: {
          return process(kTRY);
        }
        case 174:
          break;
        case 67: {
          return process(kTYPE);
        }
        case 175:
          break;
        case 6: {
          return process(tINNER_CLASS);
        }
        case 176:
          break;
        case 92: {
          return process(ObjectKeyword());
        }
        case 177:
          break;
        case 71: {
          return process(kLAZY);
        }
        case 178:
          break;
        case 76: {
          return process(kSUPER);
        }
        case 179:
          break;
        case 70: {
          return processScala3(EnumKeyword());
        }
        case 180:
          break;
        case 75: { //for comments in interpolated strings
          return process(ScalaDocElementTypes.SCALA_DOC_COMMENT);
        }
        case 181:
          break;
        case 24: {
          return process(tINTERPOLATED_STRING);
        }
        case 182:
          break;
        case 103:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
        {
          return process(kCASE);
        }
        case 183:
          break;
        case 68: {
          return process(kCASE);
        }
        case 184:
          break;
        case 4: {
          return process(tUNDER);
        }
        case 185:
          break;
        case 32: {
          return process(Float());
        }
        case 186:
          break;
        case 53: {
          if (shouldProcessBracesForInterpolated()) {
            nestedString.peek().increase();
          }

          yypushback(yylength() - 1);
          yybegin(YYINITIAL);
          return process(tLBRACE);
        }
        case 187:
          break;
        case 57: {
          return process(NewKeyword());
        }
        case 188:
          break;
        case 36: {
          return process(tSYMBOL);
        }
        case 189:
          break;
        case 46:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
        {
          yybegin(COMMON_STATE);
          return process(tINTERPOLATED_STRING_INJECTION);
        }
        case 190:
          break;
        case 18: {
          return process(tASSIGN);
        }
        case 191:
          break;
        case 27: {
          return process(tINTERPOLATED_MULTILINE_STRING);
        }
        case 192:
          break;
        case 47:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
        {
          return process(tINTERPOLATED_MULTILINE_STRING);
        }
        case 193:
          break;
        case 61:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
        {
          return process(tINTERPOLATED_MULTILINE_STRING);
        }
        case 194:
          break;
        case 93: {
          return process(kIMPORT);
        }
        case 195:
          break;
        case 29:
          // general lookahead, find correct zzMarkedPos
        {
          int zzFState = 6;
          int zzFPos = zzStartRead;
          if (zzFin.length <= zzBufferL.length()) {
            zzFin = new boolean[zzBufferL.length() + 1];
          }
          boolean zzFinL[] = zzFin;
          while (zzFState != -1 && zzFPos < zzMarkedPos) {
            if ((zzAttrL[zzFState] & 1) == 1) {
              zzFinL[zzFPos] = true;
            }
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++);
            zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
          }
          if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {
            zzFinL[zzFPos] = true;
          }

          zzFState = 7;
          zzFPos = zzMarkedPos;
          while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos);
            zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
          }
          ;
          zzMarkedPos = zzFPos;
        }
        {
          yybegin(WAIT_FOR_INTERPOLATED_STRING);
          if (endsWith(yytext(), "\"\"")) yypushback(2);
          return process(haveIdInString || haveIdInMultilineString ? tIDENTIFIER : tINTERPOLATED_STRING_ID);
        }
        case 196:
          break;
        case 99: {
          return process(kABSTRACT);
        }
        case 197:
          break;
        case 43: {
          return process(kIF);
        }
        case 198:
          break;
        case 52: {
          return process(tCHAR);
        }
        case 199:
          break;
        case 25: {
          yybegin(COMMON_STATE);
          return process(tWRONG_STRING);
        }
        case 200:
          break;
        case 19: {
          return process(tFUNTYPE);
        }
        case 201:
          break;
        case 14: {
          return process(tRSQBRACKET);
        }
        case 202:
          break;
        case 87: {
          return process(kWHILE);
        }
        case 203:
          break;
        case 77: {
          return process(TraitKeyword());
        }
        case 204:
          break;
        case 51: {
          return process(kDEF);
        }
        case 205:
          break;
        case 69: {
          return process(kELSE);
        }
        case 206:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
